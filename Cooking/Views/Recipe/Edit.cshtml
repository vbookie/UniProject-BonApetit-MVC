@model Cooking.Models.EditRecipeViewModel

@{
    ViewBag.Title = "Edit Recipe";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Recipe", FormMethod.Post, new { id = "recipeForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrepareInstructions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrepareInstructions, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PrepareInstructions, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Hidden("ingredientsCount", Model != null && Model.Ingredients != null ? Model.Ingredients.Count : 0, new { id = "ingredientsCount" })
            @Html.LabelFor(model => model.Ingredients, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="ingredientsList">
                <button type="button" class="btn btn-default" id="addIngredientButton">
                    <span class="glyphicon glyphicon-plus"></span>
                    Add ingredient
                </button>
                @if (Model != null && Model.Ingredients != null && Model.Ingredients.Count > 0)
                {
                    for (int i = 0; i < Model.Ingredients.Count; i++)
                    {
                        <div class="col-md-10 ingredient-entry-row">
                            <div class="col-md-5">
                                <input type="text" class="form-control ingredient-entry" value="@Model.Ingredients[i]" />
                            </div>
                            <div class="col-md-5 btn-group" role="group">
                                <button class="btn btn-default" type="button" onclick="removeAdditionalIngredient(this)"><span class="glyphicon glyphicon-minus"></span></button>
                                <button class="btn btn-default" type="button" onclick="addAdditionalIngredient(this)"><span class="glyphicon glyphicon-plus"></span></button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImageId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Hidden("ImageId", Model != null ? Model.ImageId.ToString() : Guid.Empty.ToString(), new { id = "recipeImageId" })
                <img src="@(Model != null && Model.ImageUrl != null ? Model.ImageUrl : string.Empty)" class="thumbnail" id="recipeImage" />
                <button type="button" id="chooseImageButton" class="btn btn-default">
                    <span class="glyphicon glyphicon-folder-open"></span>
                    Choose image
                </button>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Categories, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select name="Categories" multiple id="categoriesList" class="selectpicker">
                    @foreach (var item in ViewBag.CategoriesList as IEnumerable<SelectListItem>)
                    {
                        <option value="@item.Value" @(item.Selected ? "selected=selected" : "")>@item.Text</option>
                    }
                </select>

                @*@Html.DropDownList("Categories", ViewBag.CategoriesList as IEnumerable<SelectListItem>, htmlAttributes: new { id = "categoriesList", @class = "selectpicker", multiple = "multiple" })*@
                <button type="button" id="addCategoryButton" class="btn btn-default">
                    <span class="glyphicon glyphicon-plus"></span>
                    Add category
                </button>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" id="submitButton" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<div id="addImageDialog" title="Add image"></div>
<div id="addCategoryDialog" title="Add category"></div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/filestyle");
    @Scripts.Render("~/Scripts/recipes.js")
}
